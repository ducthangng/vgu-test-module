name: CI

# 1
# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: [dev]

env:
  REGISTRY: 'registry.digitalocean.com/gl-prod'
  SERVER_NAME: 'vgu-api'
  CLIENT_NAME: 'vgu-ui'
  IMAGE_TAG: '$(echo $GITHUB_SHA | head -c7)'

#3
jobs:
  build_push_server:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Build container image
        run: |
          cd api 
          docker build -t $(echo $REGISTRY)/$(echo $SERVER_NAME):$(echo $GITHUB_SHA | head -c7) .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITAL_OCEAN_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Remove all old images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $SERVER_NAME)")" ]; then doctl registry repository delete-manifest $(echo $SERVER_NAME) $(doctl registry repository list-tags $(echo $SERVER_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $SERVER_NAME):$(echo $GITHUB_SHA | head -c7)

  build_push_client:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: Build container image
        run: |
          cd ui
          docker build -t $(echo $REGISTRY)/$(echo $CLIENT_NAME):$(echo $GITHUB_SHA | head -c7) .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITAL_OCEAN_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Remove all old images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $CLIENT_NAME)")" ]; then doctl registry repository delete-manifest $(echo $CLIENT_NAME) $(doctl registry repository list-tags $(echo $CLIENT_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $CLIENT_NAME):$(echo $GITHUB_SHA | head -c7)

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build_push_server, build_push_client]

  #   steps:
  #     - name: Deploy to Digital Ocean droplet via SSH action
  #       uses: appleboy/ssh-action@v0.1.3
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USERNAME }}
  #         key: ${{ secrets.SSHKEY }}
  #         passphrase: ${{ secrets.PASSPHRASE }}
  #         envs: CLIENT_NAME,SERVER_NAME,REGISTRY,{{ secrets.DIGITAL_OCEAN_TOKEN }}, {{ secrets.CA_CERTIFICATE }}, {{ secrets.DB_USER }}, {{ secrets.DB_HOST }}, {{ secrets.DB_PASSWORD }}, GITHUB_SHA
  #         script: |
  #           # Login to registry
  #           docker login -u ${{ secrets.DIGITAL_OCEAN_TOKEN }} -p ${{ secrets.DIGITAL_OCEAN_TOKEN }} registry.digitalocean.com
  #           # Stop running container
  #           docker-compose down
  #           # # create the environment file sample.list from the cloud.list of the default env
  #           # cp cloud.list sample.list
  #           touch .env
  #           # # append keys
  #           # echo "DATABASE_CACERTBASE64=${{ secrets.CA_CERTIFICATE }}" >> sample.list
  #           # echo "DATABASE_USER=${{ secrets.DB_USER }}" >> sample.list
  #           # echo "DATABASE_HOST=${{ secrets.DB_HOST }}" >> sample.list
  #           # echo "DATABASE_PASSWORD=${{ secrets.DB_PASSWORD}}" >> sample.list
  #           echo "TAG=$(echo $GITHUB_SHA | head -c7)" >> .env
  #           # # Run a new container from a new image
  #           # docker run -d \
  #           # --restart always \
  #           # --name $(echo $SERVER_NAME) \
  #           # -p 8080:8080 \
  #           # --env-file /root/sample.list \
  #           # $(echo $REGISTRY)/$(echo $SERVER_NAME):$(echo $GITHUB_SHA | head -c7)
  #           # # Run a new container from a new image
  #           # docker run -d \
  #           # --restart always \
  #           # --name $(echo $CLIENT_NAME) \
  #           # -p 3000:3000 \
  #           # $(echo $REGISTRY)/$(echo $CLIENT_NAME):$(echo $GITHUB_SHA | head -c7)
  #           docker-compose -f docker-compose.yml -d --env-file .env up
  #           # remove the last line
  #           # rm -rf sample.list
  #           rm -rf .env
